#pragma once

#include <array>
#include <map>
#include <vector>

#include "core/battle.h"
#include "core/math.h"

/*

TODO LIST

âœ… Find entity positions in 2D
âœ… Find hitbox positions in 2D
âœ… 2D -> 3D coordinate conversion
âœ… 3D -> screen coordinate conversion
âœ… Draw some boxes!
âœ… Hurtboxes support w/ color distinction
âœ… Disable during cinematic camera
âœ… Add on/off keybind
âœ… Box merging
ðŸ”² Hide hurtboxes while invuln
âœ… Charlotta 5U box?
ðŸ”² Throw box support?
ðŸ”² Pushbox support?
âœ… Investigate pitch -1 multiplier
âœ… Test Cag traps
âœ… Test Nier puppet
ðŸš§ Test Katalina ares moves.
ðŸš§ Proof read logic when to collect/not-collect hitboxes (result: sus)
ðŸ”² Setup tests, including Zeta 4S, Charlotta 5U and Katalina 2S+U
*/

struct Multibox
{
	typedef std::array<Vec2, 2> Line;
	typedef std::array<Vec2, 2> AABB;

	void add_box(const AABB &new_box);
	void clip();
	std::vector<Line> get_lines() const;

private:
	std::vector<std::pair<AABB, std::vector<Line>>> boxes;
};

struct Hitbox
{
	BoxType type;
	std::vector<std::array<Vec3, 2>> lines;
};

struct HitboxViewer
{
	std::map<Entity *, std::map<BoxType, Multibox>> box_data;

	void update(const Battle *battle);
	std::vector<Hitbox> get_hitboxes() const;
};
